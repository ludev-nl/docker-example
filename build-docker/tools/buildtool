#!/bin/bash

MY_LOC="$(realpath $(dirname $0))"

DOCKER_REPO="njlboonstra/docker-example"
CONTAINER_NAME="development-docker"

HOST_SRC_DIR="$MY_LOC/../src"
DOCKER_SRC_DIR="/src"

HOST_BUILD_DIR="$MY_LOC/../build"
DOCKER_BUILD_DIR="/build"

#Little function to print to stderr, rather than stdout
function err() {
    local MSG="$1"

    echo "${MSG}" 1>&2
}

function help() {
    err "Tool for managing a development container"
    err "Usage: ${0##*/} <option> [additional arguments]"
    err "   Option can be:"
    err "       compile - compiles the application"
    err "       build-container - builds the development container (used when updating the container for the Hub)"
    err "       pull-container - pulls the development container from Docker Hubs"
    err "       ide - invokes the IDE from the container"
    err "       run - starts an interactive session in the container"
    err "               it is possible to pass additional Docker run arguments"
}

function check_docker_exists() {
    which docker > /dev/null

    if [[ $? -ne 0 ]]; then
        err "Docker is not installed!"
        exit 1
    fi
}

function check_container_exists() {
    check_docker_exists

    local DOEXIT=1

    if [[ "$1" == "silent" ]]; then
        DOEXIT=0
    fi

    #Check if our container exists by fetching its ID
    if [[ $(docker images -q "$DOCKER_REPO" | wc -l) -lt 1 ]]; then
        err "The image $DOCKER_REPO is not yet installed, please do so by calling ${0##*/} pull_container or ${0##*/} build-container"
        [[ DOEXIT -eq 0 ]] && return 0 || exit 1
    fi

    return 1
}

function check_create_dirs() {
    if [[ ! -d $HOST_BUILD_DIR ]]; then
        err "Missing build directory, creating it..."
        mkdir $HOST_BUILD_DIR
    fi

    if [[ ! -d $HOST_SRC_DIR ]]; then
        # Missing this directory should be a problem :)
        err "Missing source directory, creating it..."
        mkdir $HOST_SRC_DIR
    fi
}

function build_container() {
    check_docker_exists

    echo "Building container... (this may take long)"

    docker build $MY_LOC/container -t $DOCKER_REPO
}

function launch_ide() {
    check_container_exists

    check_create_dirs

    docker run -ti --rm -e "DISPLAY=unix$DISPLAY" \
                --name $CONTAINER_NAME \
                -v $HOST_SRC_DIR:$DOCKER_SRC_DIR \
                -v $HOST_BUILD_DIR:$DOCKER_BUILD_DIR \
                -v /dev/shm:/dev/shm \
                -v /tmp/.X11-unix:/tmp/.X11-unix:rw \
                -v $HOME/.Xauthority:/root/.Xauthority \
                --net=host \
                ${DOCKER_REPO} \
                /software/launch-ide.sh

    return 0
}

function run_container() {
    check_container_exists

    check_create_dirs

    #Remove the name of the function from the arguments in $@
    shift

    docker run -ti --rm \
                ${@} \
                --name $CONTAINER_NAME \
                -v $HOST_SRC_DIR:$DOCKER_SRC_DIR \
                -v $HOST_BUILD_DIR:$DOCKER_BUILD_DIR \
                ${DOCKER_REPO}
    return 0

}

function pull_container() {
    local DOES_EXIST=0

    check_container_exists "silent"

    DOES_EXIST=$?

    [[ $DOES_EXIST -eq 0 ]] && docker pull $DOCKER_REPO || err "Container already exists"

   return 0
}

function compile() {
    check_container_exists

    check_create_dirs

    docker run -ti --rm \
                --name $CONTAINER_NAME \
                --user "$(id -u $USER):$(id -g $USER)" \
                -v $HOST_SRC_DIR:$DOCKER_SRC_DIR \
                -v $HOST_BUILD_DIR:$DOCKER_BUILD_DIR \
                -w /src \
                ${DOCKER_REPO} \
                make

    return 0
}



case "$1" in
    "compile")
    compile
    ;;
    "build-container")
    build_container
    ;;
    "ide")
    launch_ide
    ;;
    "pull-container")
    pull_container
    ;;
    "run")
    run_container $@
    ;;
    *)
    help
    ;;
esac